---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import ArticleHeader from '../components/ArticleHeader.astro';
import ArticleBody from '../components/ArticleBody.astro';
import Quote from '../components/Quote.astro';
import SecondaryArticle from '../components/SecondaryArticle.astro';
import Navbar from '../components/Navbar.astro';
import MarketTicker from '../components/MarketTicker.astro';
import SidebarNews from '../components/SidebarNews.astro';
import LatestNews from '../components/LatestNews.astro';
import Footer from '../components/Footer.astro';
import { marked } from 'marked';

// Add timeout and error handling for fetches
const fetchWithTimeout = async (url, timeout = 5000) => {
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), timeout);
    
    const response = await fetch(url, { signal: controller.signal });
    clearTimeout(timeoutId);
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    return response;
  } catch (error) {
    console.error(`Fetch error for ${url}:`, error);
    // Return fallback data
    return {
      json: () => ({
        title: 'Unable to load article',
        author: 'System',
        content: [{ type: 'text', text: 'Please try again later.' }],
        readTime: '1 min',
        category: 'System'
      })
    };
  }
};

// Update the fetch calls
const [mainResponse, secondaryResponse] = await Promise.all([
  fetchWithTimeout(new URL("/api/main-article", Astro.url)),
  fetchWithTimeout(new URL("/api/secondary-articles", Astro.url))
]);

const featuredArticle = await mainResponse.json();
const secondaryArticles = await secondaryResponse.json();

const today = new Date().toLocaleDateString('en-US', {
  month: 'long',
  day: 'numeric',
  year: 'numeric'
});
---

<Layout title="WCJ - The Man Behind the Onchain Computer - Breaking News">
  <Navbar />
  <MarketTicker />
  <Header />
  
  <main class="grid grid-cols-1 md:grid-cols-12 gap-4 md:gap-8 max-w-7xl mx-auto px-4 py-8">
    <div class="col-span-1 md:col-span-8">
      <ArticleHeader 
        title={featuredArticle.title}
        author={featuredArticle.author}
        date={today}
        readTime={featuredArticle.readTime}
        category={featuredArticle.category}
      />
      
      <ArticleBody location={featuredArticle?.location}>
        {featuredArticle.content.map(section => (
          section.type === 'quote' 
            ? <Quote speaker={section.speaker}>{section.text}</Quote>
            : <p class="my-4 md:my-6">{section.text}</p>
        ))}
      </ArticleBody>
    </div>
    <aside class="col-span-1 md:col-span-4">
      <SidebarNews>
      </SidebarNews>
    </aside>
  </main>

  {/* Secondary stories section */}
  <section class="bg-gray-50 py-8 md:py-12">
    <div class="max-w-7xl mx-auto px-4">
      <h2 class="text-sm font-serif uppercase tracking-wider text-gray-600 mb-6 md:mb-8">More Top Stories</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 md:gap-8">
        {secondaryArticles.map((article) => (
          <SecondaryArticle
            title={article.title}
            author={article.author}
            date={today}
            category={article.category}
            readTime={article.readTime}
          >
            <div set:html={marked(article.content)} />
          </SecondaryArticle>
        ))}
      </div>
    </div>
  </section>

  <Footer />
</Layout>